#ifndef DATA_H
#define DATA_H

#include <stdint.h>

#define FALSE 0
#define TRUE 1

#define WRITE 1
#define READ 2
#define AXI_DATA_BYTE 4

#define MEM_DEPTH 1024

// Input Memory Register Definitions
#define MEM_IN_ADDR_REG 0
#define MEM_IN_0_DATA_REG 1
#define MEM_IN_1_DATA_REG 2
#define MEM_IN_2_DATA_REG 3
#define MEM_IN_3_DATA_REG 4
#define MEM_IN_4_DATA_REG 5
#define MEM_IN_5_DATA_REG 6
#define MEM_IN_6_DATA_REG 7
#define MEM_IN_7_DATA_REG 8
#define MEM_IN_8_DATA_REG 9
#define MEM_IN_9_DATA_REG 10
#define MEM_IN_10_DATA_REG 11
#define MEM_IN_11_DATA_REG 12
#define MEM_IN_12_DATA_REG 13
#define MEM_IN_13_DATA_REG 14
#define MEM_IN_14_DATA_REG 15
#define MEM_IN_15_DATA_REG 16

// Output Memory Register Definitions
#define MEM_OUT_ADDR_REG 17
#define MEM_OUT_0_DATA_REG 18
#define MEM_OUT_1_DATA_REG 19
#define MEM_OUT_2_DATA_REG 20
#define MEM_OUT_3_DATA_REG 21
#define MEM_OUT_4_DATA_REG 22
#define MEM_OUT_5_DATA_REG 23
#define MEM_OUT_6_DATA_REG 24
#define MEM_OUT_7_DATA_REG 25
#define MEM_OUT_8_DATA_REG 26
#define MEM_OUT_9_DATA_REG 27
#define MEM_OUT_10_DATA_REG 28
#define MEM_OUT_11_DATA_REG 29
#define MEM_OUT_12_DATA_REG 30
#define MEM_OUT_13_DATA_REG 31
#define MEM_OUT_14_DATA_REG 32
#define MEM_OUT_15_DATA_REG 33
#define MEM_OUT_16_DATA_REG 34
#define MEM_OUT_17_DATA_REG 35

// State Register Definitions
#define STATE_IN_REG 36
#define TEMP_REG 37
#define STATE_OUT_REG 38

// State Definitions
#define IDLE            0x00000000
#define L1_INPUT_BRAM   0x00000001
#define L1_EN_0         0x00000002
#define L2_INPUT_BRAM   0x00000004
#define L2_EN_0         0x00000005
#define L3_INPUT_BRAM   0x00000015
#define L3_EN_0         0x00000016
#define L4_INPUT_BRAM   0x00000056
#define L4_EN_0         0x00000057
#define L4_END          0x00000059

// Encoded weights for layer1 layer
const uint8_t layer1_weights[] = {
    0x0B, 0x07, 0x07, 0x05, 0x0A, 0x06, 0x06, 0x01, 0x04, 0x06, 0x06, 0x0E, 0x09, 0x07, 0x05, 0x01, 0x0A, 0x0D, 0x0D, 0x0E, 0x0D, 0x0D, 0x0E, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0C, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x07, 0x0E, 0x0C, 0x0B, 0x02, 0x0E, 0x0F, 0x0E, 0x0D, 0x0D, 0x0B, 0x0D, 0x0C, 0x0D, 0x0D, 0x00, 0x06, 0x0E, 0x0E, 0x06, 0x07, 0x0E, 0x0D, 0x07, 0x07
};

const int layer1_shape[] = {4, 16};

// Encoded weights for layer2 layer
const uint8_t layer2_weights[] = {
    0x0A, 0x0D, 0x0E, 0x0D, 0x03, 0x03, 0x04, 0x0C, 0x04, 0x04, 0x04, 0x0B, 0x0B, 0x0C, 0x04, 0x06, 0x0B, 0x04, 0x05, 0x05, 0x0C, 0x0D, 0x0D, 0x0A, 0x03, 0x0D, 0x0D, 0x0D, 0x04, 0x04, 0x0C, 0x0A, 0x04, 0x0C, 0x00, 0x04, 0x05, 0x06, 0x0B, 0x0D, 0x04, 0x05, 0x05, 0x0B, 0x04, 0x05, 0x06, 0x07, 0x05, 0x02, 0x04, 0x0A, 0x03, 0x04, 0x0C, 0x0B, 0x0C, 0x0A, 0x0B, 0x04, 0x0D, 0x0C, 0x0B, 0x0A, 0x06, 0x05, 0x05, 0x01, 0x06, 0x06, 0x05, 0x00, 0x06, 0x06, 0x0D, 0x0D, 0x05, 0x03, 0x0D, 0x0A, 0x09, 0x0D, 0x04, 0x0A, 0x0B, 0x0C, 0x05, 0x04, 0x0C, 0x05, 0x03, 0x04, 0x03, 0x05, 0x05, 0x04, 0x0D, 0x0C, 0x0D, 0x0C, 0x03, 0x0B, 0x0C, 0x0D, 0x03, 0x0D, 0x0D, 0x0E, 0x0C, 0x0E, 0x0E, 0x0E, 0x04, 0x03, 0x0B, 0x0E, 0x05, 0x0B, 0x0E, 0x0B, 0x05, 0x0D, 0x0D, 0x0B, 0x0C, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x04, 0x04, 0x05, 0x04, 0x03, 0x09, 0x03, 0x05, 0x0D, 0x0C, 0x04, 0x04, 0x01, 0x0C, 0x0D, 0x0D, 0x04, 0x0D, 0x0D, 0x0E, 0x05, 0x04, 0x03, 0x0C, 0x05, 0x04, 0x05, 0x04, 0x04, 0x02, 0x03, 0x08, 0x05, 0x06, 0x06, 0x06, 0x04, 0x05, 0x05, 0x05, 0x0A, 0x0C, 0x0C, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x02, 0x0C, 0x04, 0x02, 0x0D, 0x0B, 0x04, 0x03, 0x0B, 0x0B, 0x04, 0x05, 0x04, 0x05, 0x06, 0x03, 0x03, 0x05, 0x06, 0x03, 0x0B, 0x06, 0x06, 0x0A, 0x0A, 0x04, 0x04, 0x03, 0x04, 0x04, 0x0B, 0x05, 0x04, 0x0A, 0x03, 0x04, 0x03, 0x0C, 0x0B, 0x03, 0x05, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0D, 0x0D, 0x01, 0x0D, 0x0C, 0x0E, 0x0A, 0x0D, 0x0C, 0x0D, 0x04, 0x0C, 0x06, 0x05, 0x00, 0x04, 0x05, 0x05, 0x01, 0x02, 0x05, 0x0C, 0x02, 0x0C, 0x05, 0x01, 0x0A, 0x09, 0x05, 0x06, 0x02, 0x09, 0x06, 0x06, 0x0C, 0x08, 0x05, 0x0B, 0x0C, 0x0D, 0x0D, 0x0D, 0x0B, 0x0A, 0x0D, 0x0C, 0x0C, 0x03, 0x0C, 0x06, 0x03, 0x04, 0x05, 0x05, 0x04, 0x05, 0x06, 0x05, 0x0D, 0x0D, 0x0B, 0x0D, 0x0D, 0x0D, 0x0A, 0x0E, 0x03, 0x05, 0x04, 0x0C, 0x02, 0x0C, 0x0C, 0x0C, 0x0E, 0x04, 0x06, 0x04, 0x0B, 0x05, 0x04, 0x0D, 0x0C, 0x0C, 0x0B, 0x0C, 0x0C, 0x0D, 0x0E, 0x0E, 0x0B, 0x05, 0x06, 0x05, 0x06, 0x06, 0x05, 0x01, 0x03, 0x0C, 0x04, 0x0C, 0x01, 0x0D, 0x09, 0x03, 0x0C, 0x0D, 0x0A, 0x0B, 0x03, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x0C, 0x05, 0x05, 0x09, 0x0B, 0x0C, 0x09, 0x0D, 0x0D, 0x04, 0x04, 0x04, 0x09, 0x03, 0x01, 0x03, 0x04, 0x0C, 0x02, 0x06, 0x07, 0x05, 0x05, 0x05, 0x04, 0x0D, 0x09, 0x0C, 0x03, 0x0E, 0x0C, 0x0C, 0x04, 0x0E, 0x0E, 0x0E, 0x0D, 0x0B, 0x04, 0x04, 0x05, 0x0D, 0x0A, 0x01, 0x0B, 0x0E, 0x0D, 0x0D, 0x0D, 0x02, 0x04, 0x05, 0x04, 0x0C, 0x0C, 0x0D, 0x0A, 0x04, 0x0B, 0x05, 0x04, 0x04, 0x04, 0x04, 0x05, 0x03, 0x03, 0x04, 0x0A, 0x05, 0x04, 0x05, 0x05, 0x06, 0x06, 0x06, 0x05, 0x0C, 0x08, 0x0E, 0x0E, 0x0D, 0x0E, 0x0E, 0x0B, 0x03, 0x09, 0x0B, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0C, 0x0D, 0x03, 0x05, 0x06, 0x06, 0x05, 0x09, 0x0B, 0x03, 0x05, 0x04, 0x0A, 0x09, 0x04, 0x05, 0x01, 0x0D, 0x04, 0x04, 0x04, 0x0A, 0x05, 0x04, 0x03, 0x04, 0x0B, 0x03, 0x03, 0x03, 0x04, 0x0D, 0x05, 0x02, 0x02, 0x0E, 0x04, 0x03, 0x0D, 0x0D, 0x0C, 0x08, 0x05, 0x04, 0x03, 0x0C, 0x02, 0x03, 0x0A, 0x0D, 0x0D, 0x03, 0x0D, 0x0E, 0x0D, 0x05, 0x03, 0x04, 0x0C, 0x06, 0x04, 0x0B, 0x05, 0x06, 0x0C, 0x05, 0x04, 0x06, 0x05, 0x04, 0x04, 0x06
};

const int layer2_shape[] = {8, 64};

// Encoded weights for conv_before_fc layer
const uint8_t conv_before_fc_weights[] = {
    0x0A, 0x02, 0x03, 0x04, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x03, 0x04, 0x03, 0x04, 0x05, 0x03, 0x05, 0x01, 0x02, 0x04, 0x0C, 0x0B, 0x0B, 0x05, 0x03, 0x03, 0x0C, 0x04, 0x04, 0x0D, 0x0C, 0x05, 0x04, 0x05, 0x04, 0x0B, 0x0C, 0x0C, 0x03, 0x04, 0x0B, 0x03, 0x05, 0x04, 0x0A, 0x0B, 0x0B, 0x05, 0x05, 0x05, 0x0A, 0x05, 0x05, 0x02, 0x0A, 0x04, 0x04, 0x0D, 0x01, 0x04, 0x04, 0x0B, 0x01, 0x04, 0x04, 0x05, 0x05, 0x03, 0x0B, 0x04, 0x02, 0x0B, 0x0C, 0x0C, 0x02, 0x03, 0x0D, 0x0C, 0x04, 0x02, 0x04, 0x04, 0x05, 0x04, 0x01, 0x01, 0x05, 0x0B, 0x02, 0x0B, 0x0A, 0x05, 0x02, 0x0D, 0x0B, 0x04, 0x03, 0x0B, 0x04, 0x02, 0x0B, 0x00, 0x05, 0x0C, 0x0C, 0x0C, 0x05, 0x0A, 0x0E, 0x0D, 0x0B, 0x04, 0x04, 0x04, 0x05, 0x04, 0x04, 0x0C, 0x04, 0x05, 0x04, 0x0B, 0x04, 0x05, 0x0B, 0x03, 0x04, 0x05, 0x04, 0x04, 0x03, 0x0C, 0x0C, 0x0B, 0x08, 0x0D, 0x0B, 0x0B, 0x0C, 0x06, 0x02, 0x03, 0x04, 0x03, 0x0C, 0x03, 0x03, 0x01, 0x04, 0x03, 0x04, 0x0C, 0x0C, 0x05, 0x05, 0x0D, 0x0E, 0x03, 0x03, 0x0C, 0x02, 0x04, 0x05, 0x02, 0x05, 0x04, 0x05, 0x0C, 0x04, 0x04, 0x0B, 0x0B, 0x09, 0x0A, 0x0A, 0x03, 0x09, 0x0B, 0x0C, 0x0A, 0x09, 0x0C, 0x0A, 0x0C, 0x0A, 0x0C, 0x04, 0x0D, 0x0C, 0x0B, 0x04, 0x0C, 0x04, 0x04, 0x0C, 0x04, 0x03, 0x0B, 0x04, 0x05, 0x05, 0x04, 0x09, 0x0D, 0x04, 0x04, 0x04, 0x0B, 0x04, 0x04, 0x01, 0x03, 0x0B, 0x04, 0x04, 0x03, 0x05, 0x04, 0x0B, 0x09, 0x0A, 0x03, 0x04, 0x04, 0x04, 0x05, 0x04, 0x09, 0x05, 0x03, 0x04, 0x02, 0x05, 0x04, 0x04, 0x09, 0x05, 0x02, 0x0C, 0x01, 0x0B, 0x0C, 0x0B, 0x0B, 0x09, 0x0A, 0x0E, 0x0B, 0x0B, 0x0B, 0x0D, 0x0A, 0x0B, 0x04, 0x09, 0x0C, 0x0D, 0x0D, 0x0D, 0x0C, 0x02, 0x0D, 0x0D, 0x05, 0x04, 0x03, 0x03, 0x09, 0x09, 0x01, 0x02, 0x01, 0x05, 0x05, 0x04, 0x04, 0x04, 0x03, 0x01, 0x04, 0x03, 0x00, 0x03, 0x00, 0x04, 0x02, 0x03, 0x03, 0x0B, 0x0D, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x01, 0x01, 0x01, 0x03, 0x01, 0x04, 0x04, 0x0D, 0x0A, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x03, 0x04, 0x02, 0x03, 0x0A, 0x02, 0x04, 0x02, 0x09, 0x01, 0x00, 0x04, 0x05, 0x0B, 0x03, 0x02, 0x01, 0x03, 0x0B, 0x01, 0x00, 0x01, 0x0B, 0x10, 0x0B, 0x0C, 0x0C, 0x0C, 0x10, 0x0B, 0x04, 0x0A, 0x0C, 0x01, 0x01, 0x03, 0x02, 0x03, 0x0C, 0x05, 0x0C, 0x02, 0x0B, 0x0D, 0x02, 0x0B, 0x0D, 0x0B, 0x03, 0x0D, 0x0C, 0x00, 0x0C, 0x01, 0x0C, 0x01, 0x09, 0x03, 0x05, 0x05, 0x05, 0x04, 0x05, 0x04, 0x05, 0x0B, 0x00, 0x04, 0x0A, 0x01, 0x04, 0x0A, 0x0B, 0x0B, 0x00, 0x0A, 0x0C, 0x09, 0x02, 0x0C, 0x0A, 0x0B, 0x02, 0x10, 0x03, 0x02, 0x03, 0x05, 0x06, 0x02, 0x05, 0x04, 0x03, 0x04, 0x10, 0x09, 0x0A, 0x0B, 0x0D, 0x05, 0x00, 0x05, 0x05, 0x0A, 0x0D, 0x0A, 0x02, 0x04, 0x04, 0x02, 0x03, 0x0C, 0x0D, 0x04, 0x02, 0x0B, 0x03, 0x02, 0x0C, 0x0B, 0x04, 0x09, 0x0B, 0x09, 0x0B, 0x02, 0x03, 0x0B, 0x03, 0x01, 0x03, 0x04, 0x04, 0x04, 0x04, 0x09, 0x0B, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x02, 0x0C, 0x0A, 0x0D, 0x02, 0x01, 0x04, 0x02, 0x04, 0x0C, 0x0B, 0x05, 0x05, 0x05, 0x0C, 0x02, 0x0C, 0x0B, 0x0D, 0x0C, 0x0C, 0x08, 0x04, 0x05, 0x05, 0x01, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x01, 0x03, 0x03, 0x0A, 0x0A, 0x02, 0x0C, 0x0A, 0x04, 0x02, 0x0C, 0x0D, 0x08, 0x0A, 0x03, 0x0A, 0x02, 0x04, 0x09, 0x03, 0x03, 0x02, 0x0C, 0x0D, 0x04, 0x04, 0x0B, 0x0D, 0x04, 0x04, 0x03, 0x04, 0x0A, 0x0C, 0x0D, 0x09, 0x0D, 0x0B, 0x0D, 0x0C, 0x02, 0x05, 0x04, 0x0C, 0x0B, 0x03, 0x05, 0x09, 0x02, 0x06, 0x05, 0x03, 0x04, 0x06, 0x05, 0x03, 0x03, 0x0B, 0x0C, 0x0D, 0x0A, 0x03, 0x04, 0x05, 0x01, 0x0C, 0x0B, 0x0C, 0x03, 0x10, 0x0C, 0x04, 0x0A, 0x08, 0x01, 0x03, 0x0A, 0x04, 0x04, 0x10, 0x01, 0x09, 0x05, 0x03, 0x04, 0x02, 0x05, 0x03, 0x0B, 0x04, 0x04, 0x0B, 0x0D, 0x04, 0x01, 0x0C, 0x01, 0x04, 0x04, 0x03, 0x04, 0x03, 0x05, 0x09, 0x03, 0x04, 0x04, 0x0A, 0x0C, 0x04, 0x04, 0x04, 0x0A, 0x0A, 0x09, 0x0C, 0x0B, 0x0B, 0x09, 0x03, 0x0C, 0x0C, 0x04, 0x04, 0x0C, 0x02, 0x09, 0x05, 0x0B, 0x03, 0x10, 0x01, 0x04, 0x0A, 0x0A, 0x04, 0x03, 0x09, 0x0B, 0x05, 0x01, 0x00, 0x0C, 0x0C, 0x03, 0x0C, 0x04, 0x05, 0x02, 0x03, 0x03, 0x09, 0x02, 0x0B, 0x04, 0x02, 0x08, 0x03, 0x04, 0x04, 0x0C, 0x0A, 0x0C, 0x03, 0x0D, 0x0B, 0x0B, 0x0B, 0x02, 0x0C, 0x05, 0x04, 0x0C, 0x0B, 0x04, 0x04, 0x02, 0x04, 0x02, 0x02, 0x0A, 0x08, 0x04, 0x04, 0x0B, 0x04, 0x01, 0x0C, 0x09, 0x05, 0x04, 0x0C, 0x0B, 0x03, 0x02, 0x0C, 0x0C, 0x04, 0x03, 0x0B, 0x0C, 0x0D, 0x03, 0x05, 0x0C, 0x0B, 0x04, 0x05, 0x03, 0x09, 0x01, 0x03, 0x02, 0x0A, 0x09, 0x01, 0x0C, 0x02, 0x0C, 0x0D, 0x0B, 0x03, 0x0C, 0x05, 0x03, 0x04, 0x04, 0x09, 0x00, 0x04, 0x0B, 0x05, 0x03, 0x09, 0x0A, 0x0E, 0x0C, 0x02, 0x04, 0x03, 0x03, 0x04, 0x04, 0x03, 0x0D, 0x04, 0x04, 0x0B, 0x02, 0x08, 0x02, 0x0D, 0x03, 0x05, 0x03, 0x0D, 0x02, 0x04, 0x08, 0x09, 0x09, 0x04, 0x04, 0x0A, 0x0B, 0x0C, 0x0B, 0x0C, 0x0C, 0x02, 0x04, 0x05, 0x0B, 0x04, 0x04, 0x03, 0x0D, 0x04, 0x03, 0x0B, 0x00, 0x09, 0x04, 0x04, 0x0B, 0x03, 0x00, 0x0B, 0x04, 0x03, 0x10, 0x0D, 0x04, 0x0C, 0x04, 0x04, 0x02, 0x0D, 0x0C, 0x04, 0x04, 0x0C, 0x0B, 0x03, 0x0B, 0x0C, 0x09, 0x05, 0x05, 0x03, 0x01, 0x0C, 0x03, 0x05, 0x05, 0x08, 0x03, 0x04, 0x09, 0x0E, 0x0B, 0x03, 0x01, 0x0D, 0x0B, 0x03, 0x03, 0x05, 0x0C, 0x02, 0x00, 0x04, 0x0B, 0x0B, 0x03, 0x06, 0x03, 0x0C, 0x03, 0x04, 0x04, 0x0A, 0x0B, 0x0A, 0x04, 0x0C, 0x0D, 0x0D, 0x03, 0x04, 0x04, 0x06, 0x01, 0x0C, 0x05, 0x06, 0x01, 0x03, 0x04, 0x0C, 0x09, 0x0A, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x0C, 0x0A, 0x00, 0x0C, 0x04, 0x05, 0x0A, 0x04, 0x04, 0x05, 0x05, 0x0C, 0x0E, 0x05, 0x0C, 0x0C, 0x0E, 0x04, 0x03, 0x04, 0x0B, 0x0C, 0x04, 0x05, 0x03, 0x0B, 0x09, 0x02, 0x0C, 0x0B, 0x0A, 0x05, 0x06, 0x04, 0x0B, 0x0B, 0x04, 0x03, 0x0C, 0x02, 0x02, 0x09, 0x03, 0x04, 0x03, 0x0C, 0x09, 0x09, 0x02, 0x0C, 0x0D, 0x0B, 0x08, 0x0B, 0x05, 0x0B, 0x0A, 0x03, 0x03, 0x09, 0x03, 0x09, 0x04, 0x05, 0x0B, 0x05, 0x04, 0x09, 0x09, 0x0C, 0x09, 0x09, 0x04, 0x0D, 0x02, 0x03, 0x04, 0x0B, 0x05, 0x04, 0x05, 0x03, 0x0A, 0x02, 0x05, 0x0B, 0x02, 0x0C, 0x0C, 0x0A, 0x09, 0x0B, 0x0A, 0x0A, 0x0C, 0x0A, 0x0A, 0x04, 0x05, 0x03, 0x03, 0x0B, 0x09, 0x09, 0x03, 0x03, 0x03, 0x03, 0x0A, 0x0A, 0x02, 0x09, 0x0B, 0x03, 0x0A, 0x03, 0x09, 0x08, 0x03, 0x03, 0x05, 0x0B, 0x03, 0x04, 0x04, 0x0C, 0x0C, 0x04, 0x02, 0x03, 0x0A, 0x05, 0x0C, 0x0B, 0x04, 0x04, 0x0A, 0x03, 0x03, 0x03, 0x0C, 0x04, 0x05, 0x04, 0x02, 0x0A, 0x03, 0x0C, 0x08, 0x0B, 0x0B, 0x0A, 0x0D, 0x0B, 0x0A, 0x0B, 0x0D, 0x0C, 0x04, 0x0B, 0x0A, 0x0B, 0x04, 0x09, 0x05, 0x02, 0x04, 0x09, 0x04, 0x03, 0x09, 0x0C, 0x0D, 0x05, 0x0B, 0x01, 0x0A, 0x03, 0x04, 0x02, 0x05, 0x0D, 0x0B, 0x04, 0x04, 0x0C, 0x04, 0x05, 0x04, 0x0D, 0x00, 0x02, 0x02, 0x0B, 0x04, 0x0B, 0x0B, 0x05, 0x05, 0x04, 0x00, 0x03, 0x0A, 0x0D, 0x0D, 0x09, 0x0A, 0x0A, 0x09, 0x02, 0x0B, 0x0C, 0x03, 0x03, 0x03, 0x03, 0x04, 0x02, 0x01, 0x04, 0x04, 0x0B, 0x0B, 0x04, 0x05, 0x0C, 0x02, 0x05, 0x0B, 0x0C, 0x04, 0x0A, 0x0D, 0x01, 0x04, 0x05, 0x02, 0x0D, 0x04, 0x04, 0x01, 0x04, 0x01, 0x01, 0x0C, 0x04, 0x0C, 0x0B, 0x0B, 0x04, 0x04, 0x0A, 0x0D, 0x03, 0x02, 0x03, 0x0C, 0x02, 0x0A, 0x0C, 0x03, 0x0C, 0x04, 0x04, 0x09, 0x0C, 0x0C, 0x01, 0x04, 0x0C, 0x0A, 0x03, 0x0A, 0x03, 0x03, 0x0A, 0x0D, 0x04, 0x0B, 0x0C, 0x04, 0x03, 0x0C, 0x02, 0x05, 0x0A, 0x0C, 0x04, 0x03, 0x02, 0x03, 0x04, 0x0A, 0x0C, 0x05, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x04, 0x05, 0x08, 0x02, 0x05, 0x04, 0x04, 0x0B, 0x0D, 0x0D, 0x0C, 0x0D, 0x00, 0x0B, 0x0D, 0x0C, 0x03, 0x03, 0x0C, 0x02, 0x02, 0x04, 0x0A, 0x04, 0x05, 0x04, 0x05, 0x04, 0x02, 0x09, 0x10, 0x0C, 0x03, 0x04, 0x05, 0x09, 0x02, 0x0B, 0x0B, 0x0D, 0x02, 0x05, 0x05, 0x05, 0x0C, 0x00, 0x0C, 0x0A, 0x04, 0x0A, 0x0B, 0x03, 0x0B, 0x0D, 0x02, 0x03, 0x03, 0x0B, 0x03, 0x03, 0x01, 0x0C, 0x0B, 0x0A, 0x03, 0x03, 0x00, 0x04, 0x02, 0x0C, 0x03, 0x05, 0x05, 0x01, 0x0C, 0x0C, 0x02, 0x0D, 0x0D, 0x0D, 0x05, 0x04, 0x0A, 0x0C, 0x05, 0x09, 0x0D, 0x04, 0x09, 0x0C, 0x0B, 0x09, 0x02, 0x0B, 0x0B, 0x0B, 0x09, 0x0D, 0x05, 0x03, 0x03, 0x03, 0x02, 0x0C, 0x04, 0x04, 0x05, 0x05, 0x02, 0x09, 0x01, 0x0B, 0x03, 0x0C, 0x04, 0x05, 0x0B, 0x0B, 0x04, 0x08, 0x00, 0x0A, 0x0C, 0x02, 0x03, 0x03, 0x0C, 0x05, 0x0B, 0x0C, 0x0B, 0x0B, 0x0C, 0x03, 0x05, 0x05, 0x05, 0x02, 0x04, 0x04, 0x04, 0x0C, 0x04, 0x03, 0x00, 0x0C, 0x08, 0x04, 0x0D, 0x0C, 0x09, 0x0C, 0x0C, 0x0C, 0x0D, 0x0B, 0x04, 0x02, 0x04, 0x05, 0x09, 0x03, 0x01, 0x0A, 0x0C, 0x04, 0x03, 0x04, 0x03, 0x03, 0x04, 0x02, 0x03, 0x02, 0x04, 0x10, 0x0C, 0x02, 0x01, 0x0B, 0x0B, 0x05, 0x0D, 0x0C, 0x0B, 0x0A, 0x0C, 0x01, 0x03, 0x09, 0x05, 0x0A, 0x04, 0x02, 0x03, 0x04, 0x03, 0x03, 0x0C, 0x0C, 0x0A, 0x0C, 0x0C, 0x08, 0x04, 0x03, 0x00, 0x04, 0x05, 0x0D, 0x0A, 0x02, 0x0C, 0x02, 0x05, 0x04, 0x10, 0x03, 0x0C, 0x10, 0x0A, 0x02, 0x04, 0x03, 0x0A, 0x05, 0x09, 0x04, 0x04, 0x03, 0x04, 0x05, 0x04, 0x02, 0x04, 0x0D, 0x0B, 0x0B, 0x03, 0x05, 0x0C, 0x02, 0x03, 0x0D, 0x0B, 0x04, 0x0B, 0x0E, 0x0A, 0x01, 0x04, 0x01, 0x03, 0x04, 0x09, 0x05, 0x05, 0x04, 0x02, 0x05, 0x0B, 0x0B, 0x02, 0x0A, 0x0D, 0x0C, 0x03, 0x04, 0x02, 0x0D, 0x0D, 0x0C, 0x0B, 0x0D, 0x0B, 0x00, 0x0B, 0x0B, 0x01, 0x03, 0x04, 0x04, 0x0B, 0x0A, 0x05, 0x04, 0x05, 0x01, 0x05, 0x05, 0x04, 0x08, 0x02, 0x00, 0x0D, 0x0C, 0x03, 0x01, 0x02, 0x04, 0x03, 0x09, 0x0B, 0x00, 0x0C, 0x09, 0x0B, 0x0B, 0x0A, 0x04, 0x10, 0x0C, 0x04, 0x04, 0x0B, 0x0D, 0x04, 0x02, 0x0B, 0x0C, 0x04, 0x00, 0x0B, 0x04, 0x0A, 0x01, 0x04, 0x04, 0x04, 0x00, 0x0D, 0x0B, 0x05, 0x05, 0x0A, 0x09, 0x04, 0x0C, 0x00, 0x03, 0x0D, 0x0C, 0x0D, 0x04, 0x03, 0x04, 0x0C, 0x09, 0x09, 0x04, 0x00, 0x03, 0x03, 0x00, 0x04, 0x0A, 0x05, 0x0B, 0x0C, 0x04, 0x03, 0x0C, 0x0A, 0x04, 0x04, 0x0B, 0x0D, 0x0A, 0x0C, 0x0B, 0x04, 0x04, 0x02, 0x05, 0x03, 0x0D, 0x05, 0x02, 0x00, 0x0D, 0x03, 0x0B, 0x0D, 0x0D, 0x02, 0x0C, 0x0C, 0x04, 0x09, 0x0B, 0x04, 0x05, 0x03, 0x03, 0x04, 0x03, 0x0B, 0x04, 0x03, 0x04, 0x04, 0x02, 0x04, 0x02, 0x03, 0x05, 0x0C, 0x0C, 0x03, 0x09, 0x0A, 0x04, 0x04, 0x0D, 0x0B, 0x0A, 0x0B, 0x0D, 0x04, 0x08, 0x10, 0x0B, 0x01, 0x04, 0x03, 0x00, 0x00, 0x06, 0x0B, 0x0C, 0x0A, 0x04, 0x0B, 0x04, 0x04, 0x05, 0x0A, 0x09, 0x05, 0x03, 0x0B, 0x0D, 0x05, 0x0D, 0x0A, 0x02, 0x05, 0x02, 0x0A, 0x04, 0x05, 0x09, 0x03, 0x04, 0x0B, 0x0D, 0x03, 0x02, 0x04, 0x01, 0x05, 0x02, 0x0C, 0x03, 0x0C, 0x09, 0x03, 0x0A, 0x0B, 0x04, 0x0A, 0x0B, 0x0B, 0x04, 0x04, 0x05, 0x0C, 0x02, 0x04, 0x02, 0x05, 0x04, 0x0C, 0x08, 0x03, 0x04, 0x04, 0x0C, 0x04, 0x04, 0x0C, 0x04, 0x0C, 0x0B, 0x02, 0x10, 0x04, 0x08, 0x03, 0x0D, 0x04, 0x0D, 0x04, 0x01, 0x0C, 0x10, 0x09, 0x0C, 0x02, 0x0A, 0x0B, 0x03, 0x0B, 0x0B, 0x09, 0x0B, 0x0B, 0x0C, 0x0B, 0x01, 0x09, 0x0B, 0x09, 0x0B, 0x0B, 0x03, 0x0A, 0x03, 0x03, 0x0B, 0x0C, 0x03, 0x02, 0x02, 0x0B, 0x0A, 0x0B, 0x03, 0x03, 0x0B, 0x08, 0x0B, 0x02, 0x0A, 0x0B, 0x03, 0x0C, 0x02, 0x0B, 0x10, 0x0B, 0x09, 0x0A, 0x00, 0x0C, 0x0B, 0x0A, 0x02, 0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0B, 0x0B, 0x01, 0x0A, 0x01, 0x0C, 0x0B, 0x0C, 0x0A, 0x09, 0x0C, 0x0B, 0x0C, 0x0B, 0x10, 0x0C, 0x03, 0x03, 0x0B, 0x02, 0x0A, 0x03, 0x03, 0x0B, 0x0B, 0x09, 0x08, 0x0C, 0x0C, 0x00, 0x0B, 0x0A, 0x0C, 0x0B, 0x0A, 0x01, 0x0C, 0x0A, 0x0C, 0x00, 0x0C, 0x0B, 0x0B, 0x0B, 0x03, 0x0C, 0x03, 0x0C, 0x01, 0x0A, 0x0B, 0x0B, 0x09, 0x08, 0x02, 0x02, 0x0B, 0x0B, 0x0C, 0x0A, 0x00, 0x01, 0x09, 0x09, 0x0B, 0x00, 0x0B, 0x09, 0x0B, 0x0B, 0x0C, 0x10, 0x0C, 0x04, 0x10, 0x0C, 0x03, 0x01, 0x02, 0x02, 0x01, 0x04, 0x03, 0x04, 0x03, 0x03, 0x0B, 0x03, 0x0C, 0x02, 0x03, 0x05, 0x02, 0x04, 0x0A, 0x00, 0x02, 0x0B, 0x0A, 0x00, 0x03, 0x0D, 0x00, 0x04, 0x04, 0x04, 0x04, 0x0A, 0x0D, 0x02, 0x02, 0x0C, 0x0A, 0x0B, 0x04, 0x03, 0x10, 0x0C, 0x03, 0x04, 0x0C, 0x03, 0x03, 0x04, 0x01, 0x00, 0x02, 0x03, 0x0B, 0x0D, 0x04, 0x0C, 0x0D, 0x0B, 0x01, 0x0B, 0x04, 0x01, 0x02, 0x02, 0x02, 0x09, 0x01, 0x02, 0x04, 0x02, 0x03, 0x0B, 0x0B, 0x0A, 0x0B, 0x0B, 0x03, 0x04, 0x03, 0x0C, 0x0B, 0x05, 0x05, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0A, 0x0C, 0x0C, 0x0B, 0x0C, 0x0C, 0x0B, 0x04, 0x0A, 0x0B, 0x0B, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x02, 0x04, 0x0C, 0x03, 0x0A, 0x04, 0x05, 0x0C, 0x05, 0x02, 0x0A, 0x0D, 0x01, 0x0C, 0x0D, 0x0D, 0x00, 0x04, 0x04, 0x0D, 0x0C, 0x02, 0x04, 0x0C, 0x05, 0x04, 0x03, 0x05, 0x04, 0x04, 0x0A, 0x03, 0x03, 0x0C, 0x0E, 0x04, 0x0A, 0x0E, 0x0D, 0x05, 0x04, 0x0C, 0x0C, 0x04, 0x0C, 0x0C, 0x05, 0x0B, 0x0E, 0x04, 0x05, 0x0C, 0x0D, 0x01, 0x03, 0x0C, 0x02, 0x04, 0x03, 0x08, 0x08, 0x04, 0x0C, 0x04, 0x04, 0x05, 0x0C, 0x04, 0x03, 0x0B, 0x0B, 0x05, 0x03, 0x0B, 0x0D, 0x08, 0x0C, 0x0B, 0x00, 0x02, 0x01, 0x05, 0x05, 0x04, 0x01, 0x0C, 0x04, 0x04, 0x0C, 0x0D, 0x0C, 0x02, 0x0A, 0x03, 0x03, 0x08, 0x04, 0x05, 0x03, 0x0C, 0x0D, 0x0C, 0x00, 0x05, 0x04, 0x08, 0x0B, 0x06, 0x04, 0x0C, 0x04, 0x03, 0x02, 0x0C, 0x04, 0x04, 0x08, 0x0A, 0x04, 0x0C, 0x0B, 0x04, 0x04, 0x0C, 0x0C, 0x02, 0x03, 0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x10, 0x0D, 0x03, 0x0A, 0x0B, 0x0B, 0x0B, 0x0C, 0x04, 0x0D, 0x0B, 0x0C, 0x04, 0x03
};

const int conv_before_fc_shape[] = {16, 128};

// Encoded weights for fc_layer layer
const uint8_t fc_layer_weights[] = {
    0x05, 0x0B, 0x0C, 0x0C, 0x04, 0x0A, 0x04, 0x05, 0x0D, 0x0E, 0x0E, 0x0B, 0x04, 0x0D, 0x0E, 0x0B, 0x0C, 0x01, 0x05, 0x04, 0x03, 0x05, 0x02, 0x05, 0x05, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x04, 0x0E, 0x09, 0x02, 0x0D, 0x05, 0x0C, 0x0C, 0x06, 0x0A, 0x03, 0x0B, 0x08, 0x05, 0x04, 0x02, 0x0E, 0x0D, 0x0C, 0x05, 0x0E, 0x0D, 0x0E, 0x05, 0x05, 0x05, 0x0E, 0x0C, 0x06, 0x01, 0x03, 0x0C, 0x04, 0x0B, 0x01, 0x0E, 0x05, 0x0D, 0x0B, 0x0D, 0x05, 0x0E, 0x04, 0x04, 0x0C, 0x0C, 0x05, 0x0B, 0x05, 0x01, 0x04, 0x05, 0x0D, 0x0D, 0x04, 0x0E, 0x0E, 0x0B, 0x0C, 0x0C, 0x06, 0x02, 0x0A, 0x00, 0x04, 0x05, 0x05, 0x0D, 0x05, 0x05, 0x0D, 0x0D, 0x0E, 0x05, 0x05, 0x0E, 0x0B, 0x0C, 0x05, 0x04, 0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x05, 0x06, 0x0D, 0x05, 0x05, 0x05, 0x10, 0x05, 0x05, 0x0D, 0x0D, 0x0B, 0x05, 0x0D, 0x0C, 0x0C, 0x0D, 0x0C, 0x04, 0x0B, 0x03, 0x03, 0x04, 0x06, 0x0E, 0x09, 0x02, 0x04, 0x0D, 0x01, 0x02, 0x0C, 0x0C, 0x10, 0x05, 0x04, 0x0E, 0x04, 0x0D, 0x0D, 0x0C, 0x09, 0x0B, 0x06
};

const int fc_layer_shape[] = {10, 16};

#endif // DATA_H
